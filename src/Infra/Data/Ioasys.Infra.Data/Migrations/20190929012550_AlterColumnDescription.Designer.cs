// <auto-generated />
using Ioasys.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Ioasys.Infra.Data.Migrations
{
    [DbContext(typeof(IoasysContext))]
    [Migration("20190929012550_AlterColumnDescription")]
    partial class AlterColumnDescription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ioasys.Domain.Entities.Enterprise.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Ent_Enterprise_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnName("Ent_City")
                        .HasMaxLength(200);

                    b.Property<string>("Country")
                        .HasColumnName("Ent_Country")
                        .HasMaxLength(200);

                    b.Property<string>("Description")
                        .HasColumnName("Ent_Description");

                    b.Property<string>("Email")
                        .HasColumnName("Ent_Email")
                        .HasMaxLength(200);

                    b.Property<int>("EnterpriseTypeId")
                        .HasColumnName("Ett_EnterpriseType_Id");

                    b.Property<string>("Facebook")
                        .HasColumnName("Ent_Facebook")
                        .HasMaxLength(200);

                    b.Property<string>("Linkedin")
                        .HasColumnName("Ent_Linkedin")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasColumnName("Ent_Name")
                        .HasMaxLength(200);

                    b.Property<bool>("Own")
                        .HasColumnName("Ent_Own");

                    b.Property<string>("Phone")
                        .HasColumnName("Ent_Phone")
                        .HasMaxLength(200);

                    b.Property<string>("Photo")
                        .HasColumnName("Ent_Photo")
                        .HasMaxLength(200);

                    b.Property<float>("SharePrice")
                        .HasColumnName("Ent_SharePrice");

                    b.Property<string>("Twitter")
                        .HasColumnName("Ent_Twitter")
                        .HasMaxLength(200);

                    b.Property<int>("Value")
                        .HasColumnName("Ent_Value");

                    b.HasKey("Id");

                    b.HasIndex("EnterpriseTypeId");

                    b.ToTable("Ent_Enterprise");
                });

            modelBuilder.Entity("Ioasys.Domain.Entities.Enterprise.EnterpriseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Ett_EnterpriseType_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnName("Ett_Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Ett_EnterpriseType");
                });

            modelBuilder.Entity("Ioasys.Domain.Entities.Enterprise.Enterprise", b =>
                {
                    b.HasOne("Ioasys.Domain.Entities.Enterprise.EnterpriseType", "EnterpriseType")
                        .WithMany("Enterprises")
                        .HasForeignKey("EnterpriseTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
